version: '3'
services:
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf # all configuration panel
      - ./.docker/nginx/app/FPM/local.conf:/etc/nginx/conf.d/default.conf # app panel example
      - ./.data/nginx/logs:/var/log/nginx
      - ./app:/var/www/app
    ports:
      - "81:81"
      # - "443:443" # uncomment when production deploy
    depends_on:
      - app

    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=nginx

  app:
    build:
      context: .
      dockerfile: ./.docker/app/FPM/${PHP_VERSION}/Dockerfile
    container_name: app
    volumes:
      - ./app:/var/www/app
    restart: always
    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=app

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./.data/redis:/data
    entrypoint: redis-server --appendonly yes
    restart: always
    networks:
      - application_network

  worker:
    build:
      context: .
      dockerfile: ./.docker/worker/FPM/${PHP_VERSION}/Dockerfile
    container_name: worker
    command:
      - /usr/bin/supervisord
      - -c
      - /etc/supervisord.conf
    volumes:
      - ./app:/var/www/app
      - ./.data/logs/worker:/var/log
      - ./.docker/worker/FPM/${PHP_VERSION}/worker.conf:/etc/supervisor/conf.d/worker.conf
    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=worker

  database:
    image: mysql:latest
    container_name: database
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: laravel
      MYSQL_USER: shakib
      MYSQL_PASSWORD: secret
    ports:
      - "3306:3306"
    volumes:
      - ./.data/mysql:/var/lib/mysql
    restart: always
    networks:
      - application_network

  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    ports:
      - 1026:1025 # SMTP server
      - 8025:8025 # Web UI
    networks:
      - application_network


  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./.data/certs/certbot/conf:/etc/letsencrypt
      - ./.data/certs/certbot/www:/var/www/certbot
    networks:
      - application_network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  ngrok:
    image: ngrok/ngrok
    container_name: ngrok
    ports:
      - "4041:4040"
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTH}
    command: http --domain=${NGROK_DOMAIN} nginx:80
    depends_on:
      - nginx
    networks:
      - application_network

volumes:
  .data:
  redis:
    driver: local

networks:
  application_network:
    driver: bridge
